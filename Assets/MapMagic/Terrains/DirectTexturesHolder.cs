using System;
using UnityEngine;

using Den.Tools;

namespace MapMagic.Terrains
{
	[ExecuteInEditMode]
	public class DirectTexturesHolder : MonoBehaviour, ISerializationCallbackReceiver
	/// Short version of MaterialPropertySerializer
	/// For each tile stores an array of textures generated by Direct Textures Output node
	{
		public Vector2D position;
		public Vector2D size;
		[NonSerialized] public DictionaryOrdered<string,Texture2D> textures = new DictionaryOrdered<string, Texture2D>();

		/// Checks whether this holder contains the world position
		public bool ContainsPosition(float x, float z)
		{
			return  x > position.x  &&   x < position.x+size.x  &&
					z > position.z  &&   z < position.z+size.z;
		}

		/// Returns texture by name, null if not found.
		public Texture2D this[string name] 
		{get{
			if (textures.TryGetValue(name, out Texture2D tex))
				return tex;
			else
				return null;
		}}

		#region Examples

			/// Finds proper holder based on coordinate world position. 
			/// Null if not found.
			/// Uses GameObject.FindObjectOfType so it's not quick. Just an example.
			public static DirectTexturesHolder FindHolder (float x, float z)
			{
				DirectTexturesHolder[] holders = GameObject.FindObjectsOfType<DirectTexturesHolder>();

				foreach (DirectTexturesHolder holder in holders)
				{
					if (holder.ContainsPosition(x,z))
						return holder;
				}

				return null;
			}


			/// Finds a proper holder and evaluates position on a map with given name.
			/// In case we want to know biome or land texture value player currently in/on.
			/// 0 if player is out of any terrain.
			public static Texture2D FindTexture (string name, float x, float z)
			{
				DirectTexturesHolder holder = FindHolder(x, z);

				if (holder != null)
					return holder[name];
				else
					return null;
			}

			/// Finds a proper holder and evaluates position on a map with given name.
			/// Iterates directly on MapMagic tiles, so might be faster than previous one (however I have not checked).
			public static Texture2D FindTexture (MapMagic.Core.MapMagicObject mapMagicObject, string name, float x, float z)
			{
				TerrainTile tile = mapMagicObject.tiles.FindByWorldPosition(x, z);
				if (tile == null)
					return null;

				DirectTexturesHolder holder = tile.ActiveTerrain.GetComponent<DirectTexturesHolder>();
				if (holder == null)
					return null;

				return holder[name];
			}

		#endregion

		#region Serialization
			[SerializeField] private string[] serNames;
			[SerializeField] private Texture2D[] serTextures;
			public void OnBeforeSerialize () => (serNames,serTextures) = textures.Serialize();
			public void OnAfterDeserialize () => textures.Deserialize(serNames,serTextures);
		#endregion
	}
}
